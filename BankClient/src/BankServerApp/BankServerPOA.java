package BankServerApp;


/**
* BankServerApp/BankServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from BankServer.idl
* Friday, October 11, 2019 10:45:23 AM FJT
*/

public abstract class BankServerPOA extends org.omg.PortableServer.Servant
 implements BankServerApp.BankServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("checkAcntNum", new java.lang.Integer (0));
    _methods.put ("checkAcntStatus", new java.lang.Integer (1));
    _methods.put ("verifyAcntPin", new java.lang.Integer (2));
    _methods.put ("lockAcnt", new java.lang.Integer (3));
    _methods.put ("makeDeposit", new java.lang.Integer (4));
    _methods.put ("makeWithdrawal", new java.lang.Integer (5));
    _methods.put ("checkBalance", new java.lang.Integer (6));
    _methods.put ("checkOverdraft", new java.lang.Integer (7));
    _methods.put ("getTransactions", new java.lang.Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // BankServerApp/BankServer/checkAcntNum
       {
         int acntNum = in.read_long ();
         boolean $result = false;
         $result = this.checkAcntNum (acntNum);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // BankServerApp/BankServer/checkAcntStatus
       {
         int acntNum = in.read_long ();
         boolean $result = false;
         $result = this.checkAcntStatus (acntNum);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // BankServerApp/BankServer/verifyAcntPin
       {
         int acntNum = in.read_long ();
         int acntPin = in.read_long ();
         boolean $result = false;
         $result = this.verifyAcntPin (acntNum, acntPin);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // BankServerApp/BankServer/lockAcnt
       {
         int acntNum = in.read_long ();
         this.lockAcnt (acntNum);
         out = $rh.createReply();
         break;
       }

       case 4:  // BankServerApp/BankServer/makeDeposit
       {
         int acntNum = in.read_long ();
         int amount = in.read_long ();
         this.makeDeposit (acntNum, amount);
         out = $rh.createReply();
         break;
       }

       case 5:  // BankServerApp/BankServer/makeWithdrawal
       {
         int acntNum = in.read_long ();
         int amount = in.read_long ();
         this.makeWithdrawal (acntNum, amount);
         out = $rh.createReply();
         break;
       }

       case 6:  // BankServerApp/BankServer/checkBalance
       {
         int acntNum = in.read_long ();
         double $result = (double)0;
         $result = this.checkBalance (acntNum);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 7:  // BankServerApp/BankServer/checkOverdraft
       {
         int acntNum = in.read_long ();
         double amount = in.read_double ();
         boolean $result = false;
         $result = this.checkOverdraft (acntNum, amount);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // BankServerApp/BankServer/getTransactions
       {
         int acntNum = in.read_long ();
         String startDate = in.read_wstring ();
         String endDate = in.read_wstring ();
         String emailAddr = in.read_wstring ();
         this.getTransactions (acntNum, startDate, endDate, emailAddr);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BankServerApp/BankServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public BankServer _this() 
  {
    return BankServerHelper.narrow(
    super._this_object());
  }

  public BankServer _this(org.omg.CORBA.ORB orb) 
  {
    return BankServerHelper.narrow(
    super._this_object(orb));
  }


} // class BankServerPOA
